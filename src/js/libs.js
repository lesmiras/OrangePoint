!function(t,e,i,s){"use strict";function n(t){var e=t.currentTarget,s=t.data?t.data.options:{},n=t.data?t.data.items:[],o="",a=0;t.preventDefault(),t.stopPropagation(),i(e).attr("data-fancybox")&&(o=i(e).data("fancybox")),o?(n=n.length?n.filter('[data-fancybox="'+o+'"]'):i("[data-fancybox="+o+"]"),a=n.index(e)):n=[e],i.fancybox.open(n,s,a)}if(i){var o={speed:330,loop:!0,opacity:"auto",margin:[44,0],gutter:30,infobar:!0,buttons:!0,slideShow:!0,fullScreen:!0,thumbs:!0,closeBtn:!0,smallBtn:"auto",image:{preload:"auto",protect:!1},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen allowtransparency="true" src=""></iframe>',preload:!0,scrolling:"no",css:{}},baseClass:"",slideClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-controls"><div class="fancybox-infobar"><button data-fancybox-previous class="fancybox-button fancybox-button--left" title="Previous"></button><div class="fancybox-infobar__body"><span class="js-fancybox-index"></span>&nbsp;/&nbsp;<span class="js-fancybox-count"></span></div><button data-fancybox-next class="fancybox-button fancybox-button--right" title="Next"></button></div><div class="fancybox-buttons"><button data-fancybox-close class="fancybox-button fancybox-button--close" title="Close (Esc)"></button></div></div><div class="fancybox-slider-wrap"><div class="fancybox-slider"></div></div><div class="fancybox-caption-wrap"><div class="fancybox-caption"></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>The requested content cannot be loaded. <br /> Please try again later.<p></div>',closeTpl:'<button data-fancybox-close class="fancybox-close-small"></button>',parentEl:"body",touch:!0,keyboard:!0,focus:!0,closeClickOutside:!0,beforeLoad:i.noop,afterLoad:i.noop,beforeMove:i.noop,afterMove:i.noop,onComplete:i.noop,onInit:i.noop,beforeClose:i.noop,afterClose:i.noop,onActivate:i.noop,onDeactivate:i.noop},a=i(t),r=i(e),l=0,c=function(t){return t&&t.hasOwnProperty&&t instanceof i},h=function(){return t.requestAnimationFrame||t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame||function(e){t.setTimeout(e,1e3/60)}}(),u=function(s){var n;return"function"==typeof i&&s instanceof i&&(s=s[0]),n=s.getBoundingClientRect(),n.bottom>0&&n.right>0&&n.left<(t.innerWidth||e.documentElement.clientWidth)&&n.top<(t.innerHeight||e.documentElement.clientHeight)},d=function(t,s,n){var a=this;a.opts=i.extend(!0,{index:n},o,s||{}),a.id=a.opts.id||++l,a.group=[],a.currIndex=parseInt(a.opts.index,10)||0,a.prevIndex=null,a.prevPos=null,a.currPos=0,a.firstRun=null,a.createGroup(t),a.group.length&&(a.$lastFocus=i(e.activeElement).blur(),a.slides={},a.init(t))};i.extend(d.prototype,{init:function(){var t,e,s=this,n=!1;s.scrollTop=r.scrollTop(),s.scrollLeft=r.scrollLeft(),i.fancybox.getInstance()||(t=i("body").width(),i("html").addClass("fancybox-enabled"),i.fancybox.isTouch?(i.each(s.group,function(t,e){if("image"!==e.type&&"iframe"!==e.type)return n=!0,!1}),n&&i("body").css({position:"fixed",width:t,top:-1*s.scrollTop})):(t=i("body").width()-t)>1&&i('<style id="fancybox-noscroll" type="text/css">').html(".compensate-for-scrollbar, .fancybox-enabled body { margin-right: "+t+"px; }").appendTo("head")),e=i(s.opts.baseTpl).attr("id","fancybox-container-"+s.id).data("FancyBox",s).addClass(s.opts.baseClass).hide().prependTo(s.opts.parentEl),s.$refs={container:e,bg:e.find(".fancybox-bg"),controls:e.find(".fancybox-controls"),buttons:e.find(".fancybox-buttons"),slider_wrap:e.find(".fancybox-slider-wrap"),slider:e.find(".fancybox-slider"),caption:e.find(".fancybox-caption")},s.trigger("onInit"),s.activate(),s.current||s.jumpTo(s.currIndex)},createGroup:function(t){var e=this,s=i.makeArray(t);i.each(s,function(t,s){var n,o,a,r,l={},c={},h=[];i.isPlainObject(s)?(l=s,c=s.opts||{}):"object"===i.type(s)&&i(s).length?(n=i(s),h=n.data(),c="options"in h?h.options:{},c="object"===i.type(c)?c:{},l.type="type"in h?h.type:c.type,l.src="src"in h?h.src:c.src||n.attr("href"),c.width="width"in h?h.width:c.width,c.height="height"in h?h.height:c.height,c.thumb="thumb"in h?h.thumb:c.thumb,c.selector="selector"in h?h.selector:c.selector,"srcset"in h&&(c.image={srcset:h.srcset}),c.$orig=n):l={type:"html",content:s+""},l.opts=i.extend(!0,{},e.opts,c),o=l.type,a=l.src||"",o||(l.content?o="html":a.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?o="image":a.match(/\.(pdf)((\?|#).*)?$/i)?o="pdf":"#"===a.charAt(0)&&(o="inline"),l.type=o),l.index=e.group.length,l.opts.$orig&&!l.opts.$orig.length&&delete l.opts.$orig,!l.opts.$thumb&&l.opts.$orig&&(l.opts.$thumb=l.opts.$orig.find("img:first")),l.opts.$thumb&&!l.opts.$thumb.length&&delete l.opts.$thumb,"function"===i.type(l.opts.caption)?l.opts.caption=l.opts.caption.apply(s,[e,l]):"caption"in h?l.opts.caption=h.caption:c.$orig&&(l.opts.caption=n.attr("title")),l.opts.caption=void 0===l.opts.caption?"":l.opts.caption+"","ajax"===o&&(r=a.split(/\s+/,2),r.length>1&&(l.src=r.shift(),l.opts.selector=r.shift())),"auto"==l.opts.smallBtn&&(i.inArray(o,["html","inline","ajax"])>-1?(l.opts.buttons=!1,l.opts.smallBtn=!0):l.opts.smallBtn=!1),"pdf"===o&&(l.type="iframe",l.opts.closeBtn=!0,l.opts.smallBtn=!1,l.opts.iframe.preload=!1),l.opts.modal&&i.extend(!0,l.opts,{infobar:0,buttons:0,keyboard:0,slideShow:0,fullScreen:0,closeClickOutside:0}),e.group.push(l)})},addEvents:function(){var e=this;e.removeEvents(),e.$refs.container.on("click.fb-close","[data-fancybox-close]",function(t){t.stopPropagation(),t.preventDefault(),e.close(t)}).on("click.fb-previous","[data-fancybox-previous]",function(t){t.stopPropagation(),t.preventDefault(),e.previous()}).on("click.fb-next","[data-fancybox-next]",function(t){t.stopPropagation(),t.preventDefault(),e.next()}),i(t).on("orientationchange.fb resize.fb",function(t){h(function(){t&&t.originalEvent&&"resize"===t.originalEvent.type?e.update():(e.$refs.slider_wrap.hide(),h(function(){e.$refs.slider_wrap.show(),e.update()}))})}),r.on("focusin.fb",function(t){var s=i.fancybox?i.fancybox.getInstance():null;!s||i(t.target).hasClass("fancybox-container")||i.contains(s.$refs.container[0],t.target)||(t.stopPropagation(),s.focus(),a.scrollTop(e.scrollTop).scrollLeft(e.scrollLeft))}),r.on("keydown.fb",function(t){var s=e.current,n=t.keyCode||t.which;if(s&&s.opts.keyboard&&!i(t.target).is("input")&&!i(t.target).is("textarea")){if(8===n||27===n)return t.preventDefault(),void e.close(t);switch(n){case 37:case 38:t.preventDefault(),e.previous();break;case 39:case 40:t.preventDefault(),e.next();break;case 80:case 32:t.preventDefault(),e.SlideShow&&(t.preventDefault(),e.SlideShow.toggle());break;case 70:e.FullScreen&&(t.preventDefault(),e.FullScreen.toggle());break;case 71:e.Thumbs&&(t.preventDefault(),e.Thumbs.toggle())}}})},removeEvents:function(){a.off("scroll.fb resize.fb orientationchange.fb"),r.off("keydown.fb focusin.fb click.fb-close"),this.$refs.container.off("click.fb-close click.fb-previous click.fb-next")},previous:function(t){this.jumpTo(this.currIndex-1,t)},next:function(t){this.jumpTo(this.currIndex+1,t)},jumpTo:function(t,e){var i,s,n,o,a=this;if(i=a.firstRun=null===a.firstRun,s=n=t=parseInt(t,10),o=!!a.current&&a.current.opts.loop,!a.isAnimating&&(s!=a.currIndex||i)){if(a.group.length>1&&o)s%=a.group.length,s=s<0?a.group.length+s:s,2==a.group.length?n=t-a.currIndex+a.currPos:(n=s-a.currIndex+a.currPos,Math.abs(a.currPos-(n+a.group.length))<Math.abs(a.currPos-n)?n+=a.group.length:Math.abs(a.currPos-(n-a.group.length))<Math.abs(a.currPos-n)&&(n-=a.group.length));else if(!a.group[s])return void a.update(!1,!1,e);a.current&&(a.current.$slide.removeClass("fancybox-slide--current fancybox-slide--complete"),a.updateSlide(a.current,!0)),a.prevIndex=a.currIndex,a.prevPos=a.currPos,a.currIndex=s,a.currPos=n,a.current=a.createSlide(n),a.group.length>1&&((a.opts.loop||n-1>=0)&&a.createSlide(n-1),(a.opts.loop||n+1<a.group.length)&&a.createSlide(n+1)),a.current.isMoved=!1,a.current.isComplete=!1,e=parseInt(void 0===e?1.5*a.current.opts.speed:e,10),a.trigger("beforeMove"),a.updateControls(),i&&(a.current.$slide.addClass("fancybox-slide--current"),a.$refs.container.show(),h(function(){a.$refs.bg.css("transition-duration",a.current.opts.speed+"ms"),a.$refs.container.addClass("fancybox-container--ready")})),a.update(!0,!1,i?0:e,function(){a.afterMove()}),a.loadSlide(a.current),i&&a.current.$ghost||a.preload()}},createSlide:function(t){var e,s,n,o=this;if(s=t%o.group.length,s=s<0?o.group.length+s:s,!o.slides[t]&&o.group[s]){if(o.opts.loop&&o.group.length>2)for(var a in o.slides)if(o.slides[a].index===s)return n=o.slides[a],n.pos=t,o.slides[t]=n,delete o.slides[a],o.updateSlide(n),n;e=i('<div class="fancybox-slide"></div>').appendTo(o.$refs.slider),o.slides[t]=i.extend(!0,{},o.group[s],{pos:t,$slide:e,isMoved:!1,isLoaded:!1})}return o.slides[t]},zoomInOut:function(t,e,s){var n,o,a,r=this,l=r.current,c=l.$placeholder,h=l.opts.opacity,d=l.opts.$thumb,p=d?d.offset():0,f=l.$slide.offset();return!!(c&&l.isMoved&&p&&u(d))&&(!("In"===t&&!r.firstRun)&&(i.fancybox.stop(c),r.isAnimating=!0,n={top:p.top-f.top+parseFloat(d.css("border-top-width")||0),left:p.left-f.left+parseFloat(d.css("border-left-width")||0),width:d.width(),height:d.height(),scaleX:1,scaleY:1},"auto"==h&&(h=Math.abs(l.width/l.height-n.width/n.height)>.1),"In"===t?(o=n,a=r.getFitPos(l),a.scaleX=a.width/o.width,a.scaleY=a.height/o.height,h&&(o.opacity=.1,a.opacity=1)):(o=i.fancybox.getTranslate(c),a=n,l.$ghost&&(l.$ghost.show(),l.$image&&l.$image.remove()),o.scaleX=o.width/a.width,o.scaleY=o.height/a.height,o.width=a.width,o.height=a.height,h&&(a.opacity=0)),r.updateCursor(a.width,a.height),delete a.width,delete a.height,i.fancybox.setTranslate(c,o),c.show(),r.trigger("beforeZoom"+t),c.css("transition","all "+e+"ms"),i.fancybox.setTranslate(c,a),setTimeout(function(){var e;c.css("transition","none"),e=i.fancybox.getTranslate(c),e.scaleX=1,e.scaleY=1,i.fancybox.setTranslate(c,e),r.trigger("afterZoom"+t),s.apply(r),r.isAnimating=!1},e),!0))},canPan:function(){var t=this,e=t.current,i=e.$placeholder,s=!1;return i&&(s=t.getFitPos(e),s=Math.abs(i.width()-s.width)>1||Math.abs(i.height()-s.height)>1),s},isScaledDown:function(){var t=this,e=t.current,s=e.$placeholder,n=!1;return s&&(n=i.fancybox.getTranslate(s),n=n.width<e.width||n.height<e.height),n},scaleToActual:function(t,e,s){var n,o,a,r,l,c=this,h=c.current,u=h.$placeholder,d=parseInt(h.$slide.width(),10),p=parseInt(h.$slide.height(),10),f=h.width,g=h.height;u&&(c.isAnimating=!0,t=void 0===t?.5*d:t,e=void 0===e?.5*p:e,n=i.fancybox.getTranslate(u),r=f/n.width,l=g/n.height,o=.5*d-.5*f,a=.5*p-.5*g,f>d&&(o=n.left*r-(t*r-t),o>0&&(o=0),o<d-f&&(o=d-f)),g>p&&(a=n.top*l-(e*l-e),a>0&&(a=0),a<p-g&&(a=p-g)),c.updateCursor(f,g),i.fancybox.animate(u,null,{top:a,left:o,scaleX:r,scaleY:l},s||h.opts.speed,function(){c.isAnimating=!1}))},scaleToFit:function(t){var e,s=this,n=s.current,o=n.$placeholder;o&&(s.isAnimating=!0,e=s.getFitPos(n),s.updateCursor(e.width,e.height),i.fancybox.animate(o,null,{top:e.top,left:e.left,scaleX:e.width/o.width(),scaleY:e.height/o.height()},t||n.opts.speed,function(){s.isAnimating=!1}))},getFitPos:function(t){var e,s,n,o,r,l,c,h=t.$placeholder||t.$content,u=t.width,d=t.height,p=t.opts.margin;return!(!h||!h.length||!u&&!d)&&("number"===i.type(p)&&(p=[p,p]),2==p.length&&(p=[p[0],p[1],p[0],p[1]]),a.width()<800&&(p=[0,0,0,0]),e=parseInt(t.$slide.width(),10)-(p[1]+p[3]),s=parseInt(t.$slide.height(),10)-(p[0]+p[2]),n=Math.min(1,e/u,s/d),l=Math.floor(n*u),c=Math.floor(n*d),o=Math.floor(.5*(s-c))+p[0],r=Math.floor(.5*(e-l))+p[3],{top:o,left:r,width:l,height:c})},update:function(t,e,s,n){var o,a=this;!0!==a.isAnimating&&a.current&&(o=a.current.pos*Math.floor(a.current.$slide.width())*-1-a.current.pos*a.current.opts.gutter,s=parseInt(s,10)||0,i.fancybox.stop(a.$refs.slider),!1===t?a.updateSlide(a.current,e):i.each(a.slides,function(t,i){a.updateSlide(i,e)}),s?i.fancybox.animate(a.$refs.slider,null,{top:0,left:o},s,function(){a.current.isMoved=!0,"function"===i.type(n)&&n.apply(a)}):(i.fancybox.setTranslate(a.$refs.slider,{top:0,left:o}),a.current.isMoved=!0,"function"===i.type(n)&&n.apply(a)))},updateSlide:function(t,e){var s,n=this,o=t.$placeholder;(t=t||n.current)&&!n.isClosing&&(s=t.pos*Math.floor(t.$slide.width())+t.pos*t.opts.gutter,s!==t.leftPos&&(i.fancybox.setTranslate(t.$slide,{top:0,left:s}),t.leftPos=s),!1!==e&&o&&(i.fancybox.setTranslate(o,n.getFitPos(t)),t.pos===n.currPos&&n.updateCursor()),t.$slide.trigger("refresh"),n.trigger("onUpdate",t))},updateCursor:function(t,e){var i,s=this,n=s.$refs.container.removeClass("fancybox-controls--canzoomIn fancybox-controls--canzoomOut fancybox-controls--canGrab");!s.isClosing&&s.opts.touch&&(i=void 0!==t&&void 0!==e?t<s.current.width&&e<s.current.height:s.isScaledDown(),i?n.addClass("fancybox-controls--canzoomIn"):s.group.length<2?n.addClass("fancybox-controls--canzoomOut"):n.addClass("fancybox-controls--canGrab"))},loadSlide:function(t){var e,s,n,o=this;if(t&&!t.isLoaded&&!t.isLoading){switch(t.isLoading=!0,o.trigger("beforeLoad",t),e=t.type,s=t.$slide,s.off("refresh").trigger("onReset").addClass("fancybox-slide--"+(e||"unknown")).addClass(t.opts.slideClass),e){case"image":o.setImage(t);break;case"iframe":o.setIframe(t);break;case"html":o.setContent(t,t.content);break;case"inline":i(t.src).length?o.setContent(t,i(t.src)):o.setError(t);break;case"ajax":o.showLoading(t),n=i.ajax(i.extend({},t.opts.ajax.settings,{url:t.src,success:function(e,i){"success"===i&&o.setContent(t,e)},error:function(e,i){e&&"abort"!==i&&o.setError(t)}})),s.one("onReset",function(){n.abort()});break;default:o.setError(t)}return!0}},setImage:function(e){var s,n,o,a,r=this,l=e.opts.image.srcset;if(e.isLoaded&&!e.hasError)return void r.afterLoad(e);if(l){o=t.devicePixelRatio||1,a=t.innerWidth*o,n=l.split(",").map(function(t){var e={};return t.trim().split(/\s+/).forEach(function(t,i){var s=parseInt(t.substring(0,t.length-1),10);if(0===i)return e.url=t;s&&(e.value=s,e.postfix=t[t.length-1])}),e}),n.sort(function(t,e){return t.value-e.value});for(var c=0;c<n.length;c++){var h=n[c];if("w"===h.postfix&&h.value>=a||"x"===h.postfix&&h.value>=o){s=h;break}}!s&&n.length&&(s=n[n.length-1]),s&&(e.src=s.url,e.width&&e.height&&"w"==s.postfix&&(e.height=e.width/e.height*s.value,e.width=s.value))}e.$placeholder=i('<div class="fancybox-placeholder"></div>').hide().appendTo(e.$slide),!1!==e.opts.preload&&e.opts.width&&e.opts.height&&(e.opts.thumb||e.opts.$thumb)?(e.width=e.opts.width,e.height=e.opts.height,e.$ghost=i("<img />").one("load error",function(){r.isClosing||(i("<img/>")[0].src=e.src,r.revealImage(e,function(){r.setBigImage(e),r.firstRun&&e.index===r.currIndex&&r.preload()}))}).addClass("fancybox-image").appendTo(e.$placeholder).attr("src",e.opts.thumb||e.opts.$thumb.attr("src"))):r.setBigImage(e)},setBigImage:function(t){var e=this,s=i("<img />");t.$image=s.one("error",function(){e.setError(t)}).one("load",function(){clearTimeout(t.timouts),t.timouts=null,e.isClosing||(t.width=this.naturalWidth,t.height=this.naturalHeight,t.opts.image.srcset&&s.attr("sizes","100vw").attr("srcset",t.opts.image.srcset),e.afterLoad(t),t.$ghost&&(t.timouts=setTimeout(function(){t.$ghost.hide()},350)))}).addClass("fancybox-image").attr("src",t.src).appendTo(t.$placeholder),s[0].complete?s.trigger("load"):s[0].error?s.trigger("error"):t.timouts=setTimeout(function(){s[0].complete||t.hasError||e.showLoading(t)},150),t.opts.image.protect&&i('<div class="fancybox-spaceball"></div>').appendTo(t.$placeholder).on("contextmenu.fb",function(t){return 2==t.button&&t.preventDefault(),!0})},revealImage:function(t,e){var s=this;if(e=e||i.noop,"image"!==t.type||t.hasError||!0===t.isRevealed)return void e.apply(s);t.isRevealed=!0,t.pos===s.currPos&&s.zoomInOut("In",t.opts.speed,e)||(t.$ghost&&!t.isLoaded&&s.updateSlide(t,!0),t.pos===s.currPos?i.fancybox.animate(t.$placeholder,{opacity:0},{opacity:1},300,e):t.$placeholder.show(),e.apply(s))},setIframe:function(t){var e,s=this,n=t.opts.iframe,o=t.$slide;t.$content=i('<div class="fancybox-content"></div>').css(n.css).appendTo(o),e=i(n.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr("scrolling",i.fancybox.isTouch?"auto":n.scrolling).appendTo(t.$content),n.preload?(t.$content.addClass("fancybox-tmp"),s.showLoading(t),e.on("load.fb error.fb",function(e){this.isReady=1,t.$slide.trigger("refresh"),s.afterLoad(t)}),o.on("refresh.fb",function(){var i,s,o,a,r,l=t.$content;if(1===e[0].isReady){try{i=e.contents(),s=i.find("body")}catch(t){}s&&s.length&&(void 0===n.css.width||void 0===n.css.height)&&(o=e[0].contentWindow.document.documentElement.scrollWidth,a=Math.ceil(s.outerWidth(!0)+(l.width()-o)),r=Math.ceil(s.outerHeight(!0)),l.css({width:void 0===n.css.width?a+(l.outerWidth()-l.innerWidth()):n.css.width,height:void 0===n.css.height?r+(l.outerHeight()-l.innerHeight()):n.css.height})),l.removeClass("fancybox-tmp")}})):this.afterLoad(t),e.attr("src",t.src),t.opts.smallBtn&&t.$content.prepend(t.opts.closeTpl),o.one("onReset",function(){try{i(this).find("iframe").hide().attr("src","//about:blank")}catch(t){}i(this).empty(),t.isLoaded=!1})},setContent:function(t,e){var s=this;s.isClosing||(s.hideLoading(t),t.$slide.empty(),c(e)&&e.parent().length?(e.data("placeholder")&&e.parents(".fancybox-slide").trigger("onReset"),e.data({placeholder:i("<div></div>").hide().insertAfter(e)}).css("display","inline-block")):("string"===i.type(e)&&(e=i("<div>").append(e).contents(),3===e[0].nodeType&&(e=i("<div>").html(e))),t.opts.selector&&(e=i("<div>").html(e).find(t.opts.selector))),t.$slide.one("onReset",function(){var s=c(e)?e.data("placeholder"):0;s&&(e.hide().replaceAll(s),e.data("placeholder",null)),t.hasError||(i(this).empty(),t.isLoaded=!1)}),t.$content=i(e).appendTo(t.$slide),!0===t.opts.smallBtn&&t.$content.find(".fancybox-close-small").remove().end().eq(0).append(t.opts.closeTpl),this.afterLoad(t))},setError:function(t){t.hasError=!0,this.setContent(t,t.opts.errorTpl)},showLoading:function(t){var e=this;(t=t||e.current)&&!t.$spinner&&(t.$spinner=i(e.opts.spinnerTpl).appendTo(t.$slide))},hideLoading:function(t){var e=this;(t=t||e.current)&&t.$spinner&&(t.$spinner.remove(),delete t.$spinner)},afterMove:function(){var t=this,e=t.current,s={};e&&(e.$slide.siblings().trigger("onReset"),i.each(t.slides,function(e,i){i.pos>=t.currPos-1&&i.pos<=t.currPos+1?s[i.pos]=i:i&&i.$slide.remove()}),t.slides=s,t.trigger("afterMove"),e.isLoaded&&t.complete())},afterLoad:function(t){var e=this;e.isClosing||(t.isLoading=!1,t.isLoaded=!0,e.trigger("afterLoad",t),e.hideLoading(t),t.$ghost||e.updateSlide(t,!0),t.index===e.currIndex&&t.isMoved?e.complete():t.$ghost||e.revealImage(t))},complete:function(){var t=this,e=t.current;t.revealImage(e,function(){e.isComplete=!0,e.$slide.addClass("fancybox-slide--complete"),t.updateCursor(),t.trigger("onComplete"),e.opts.focus&&"image"!==e.type&&"iframe"!==e.type&&t.focus()})},preload:function(){var t,e,i=this;i.group.length<2||(t=i.slides[i.currPos+1],e=i.slides[i.currPos-1],t&&"image"===t.type&&i.loadSlide(t),e&&"image"===e.type&&i.loadSlide(e))},focus:function(){var t,e=this.current;t=e&&e.isComplete?e.$slide.find('button,:input,[tabindex],a:not(".disabled")').filter(":visible:first"):null,t&&t.length||(t=this.$refs.container),t.focus(),this.$refs.slider_wrap.scrollLeft(0),e&&e.$slide.scrollTop(0)},activate:function(){var t=this;i(".fancybox-container").each(function(){var e=i(this).data("FancyBox");e&&e.uid!==t.uid&&!e.isClosing&&e.trigger("onDeactivate")}),t.current&&(t.$refs.container.index()>0&&t.$refs.container.prependTo(e.body),t.updateControls()),t.trigger("onActivate"),t.addEvents()},close:function(t){var e=this,s=e.current,n=s.opts.speed,o=i.proxy(function(){e.cleanUp(t)},this);return!e.isAnimating&&!e.isClosing&&(!1===e.trigger("beforeClose",t)?(i.fancybox.stop(e.$refs.slider),void h(function(){e.update(!0,!0,150)})):(e.isClosing=!0,s.timouts&&clearTimeout(s.timouts),!0!==t&&i.fancybox.stop(e.$refs.slider),e.$refs.container.removeClass("fancybox-container--active").addClass("fancybox-container--closing"),s.$slide.removeClass("fancybox-slide--complete").siblings().remove(),s.isMoved||s.$slide.css("overflow","visible"),e.removeEvents(),e.hideLoading(s),e.hideControls(),e.updateCursor(),e.$refs.bg.css("transition-duration",n+"ms"),this.$refs.container.removeClass("fancybox-container--ready"),void(!0===t?setTimeout(o,n):e.zoomInOut("Out",n,o)||i.fancybox.animate(e.$refs.container,null,{opacity:0},n,"easeInSine",o))))},cleanUp:function(t){var e,s=this;s.$refs.slider.children().trigger("onReset"),s.$refs.container.empty().remove(),s.trigger("afterClose",t),s.current=null,e=i.fancybox.getInstance(),e?e.activate():(i("html").removeClass("fancybox-enabled"),i("body").removeAttr("style"),a.scrollTop(s.scrollTop).scrollLeft(s.scrollLeft),i("#fancybox-noscroll").remove()),s.$lastFocus&&s.$lastFocus.focus()},trigger:function(t,s){var n,o=Array.prototype.slice.call(arguments,1),a=this,r=s&&s.opts?s:a.current;if(r?o.unshift(r):r=a,o.unshift(a),i.isFunction(r.opts[t])&&(n=r.opts[t].apply(r,o)),!1===n)return n;"afterClose"===t?i(e).trigger(t+".fb",o):a.$refs.container.trigger(t+".fb",o)},toggleControls:function(t){this.isHiddenControls?this.updateControls(t):this.hideControls()},hideControls:function(){this.isHiddenControls=!0,this.$refs.container.removeClass("fancybox-show-controls"),this.$refs.container.removeClass("fancybox-show-caption")},updateControls:function(t){var e=this,s=e.$refs.container,n=e.$refs.caption,o=e.current,a=o.index,r=o.opts,l=r.caption;this.isHiddenControls&&!0!==t||(this.isHiddenControls=!1,s.addClass("fancybox-show-controls").toggleClass("fancybox-show-infobar",!!r.infobar&&e.group.length>1).toggleClass("fancybox-show-buttons",!!r.buttons).toggleClass("fancybox-is-modal",!!r.modal),i(".fancybox-button--left",s).toggleClass("fancybox-button--disabled",!r.loop&&a<=0),i(".fancybox-button--right",s).toggleClass("fancybox-button--disabled",!r.loop&&a>=e.group.length-1),i(".fancybox-button--play",s).toggle(!!(r.slideShow&&e.group.length>1)),i(".fancybox-button--close",s).toggle(!!r.closeBtn),i(".js-fancybox-count",s).html(e.group.length),i(".js-fancybox-index",s).html(a+1),o.$slide.trigger("refresh"),n&&n.empty(),l&&l.length?(n.html(l),this.$refs.container.addClass("fancybox-show-caption "),e.$caption=n):this.$refs.container.removeClass("fancybox-show-caption"))}}),i.fancybox={version:"3.0.47",defaults:o,getInstance:function(t){var e=i('.fancybox-container:not(".fancybox-container--closing"):first').data("FancyBox"),s=Array.prototype.slice.call(arguments,1);return e instanceof d&&("string"===i.type(t)?e[t].apply(e,s):"function"===i.type(t)&&t.apply(e,s),e)},open:function(t,e,i){return new d(t,e,i)},close:function(t){var e=this.getInstance();e&&(e.close(),!0===t&&this.close())},isTouch:void 0!==e.createTouch&&/Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent),use3d:function(){var i=e.createElement("div");return t.getComputedStyle(i).getPropertyValue("transform")&&!(e.documentMode&&e.documentMode<=11)}(),getTranslate:function(t){var e,i;return!(!t||!t.length)&&(e=t.get(0).getBoundingClientRect(),i=t.eq(0).css("transform"),i&&-1!==i.indexOf("matrix")?(i=i.split("(")[1],i=i.split(")")[0],i=i.split(",")):i=[],i.length?(i=i.length>10?[i[13],i[12],i[0],i[5]]:[i[5],i[4],i[0],i[3]],i=i.map(parseFloat)):i=[0,0,1,1],{top:i[0],left:i[1],scaleX:i[2],scaleY:i[3],opacity:parseFloat(t.css("opacity")),width:e.width,height:e.height})},setTranslate:function(t,e){var i="",s={};if(t&&e)return void 0===e.left&&void 0===e.top||(i=(void 0===e.left?t.position().top:e.left)+"px, "+(void 0===e.top?t.position().top:e.top)+"px",i=this.use3d?"translate3d("+i+", 0px)":"translate("+i+")"),void 0!==e.scaleX&&void 0!==e.scaleY&&(i=(i.length?i+" ":"")+"scale("+e.scaleX+", "+e.scaleY+")"),i.length&&(s.transform=i),void 0!==e.opacity&&(s.opacity=e.opacity),void 0!==e.width&&(s.width=e.width),void 0!==e.height&&(s.height=e.height),t.css(s)},easing:{easeOutCubic:function(t,e,i,s){return i*((t=t/s-1)*t*t+1)+e},easeInCubic:function(t,e,i,s){return i*(t/=s)*t*t+e},easeOutSine:function(t,e,i,s){return i*Math.sin(t/s*(Math.PI/2))+e},easeInSine:function(t,e,i,s){return-i*Math.cos(t/s*(Math.PI/2))+i+e}},stop:function(t){t.removeData("animateID")},animate:function(t,e,s,n,o,a){var r,l,c,u=this,d=null,p=0,f=function(){void 0!==s.scaleX&&void 0!==s.scaleY&&e&&void 0!==e.width&&void 0!==e.height&&(s.width=e.width*s.scaleX,s.height=e.height*s.scaleY,s.scaleX=1,s.scaleY=1),u.setTranslate(t,s),a()},g=function(i){if(r=[],l=0,t.length&&t.data("animateID")===c){if(i=i||Date.now(),d&&(l=i-d),d=i,(p+=l)>=n)return void f();for(var a in s)s.hasOwnProperty(a)&&void 0!==e[a]&&(e[a]==s[a]?r[a]=s[a]:r[a]=u.easing[o](p,e[a],s[a]-e[a],n));u.setTranslate(t,r),h(g)}};u.animateID=c=void 0===u.animateID?1:u.animateID+1,t.data("animateID",c),void 0===a&&"function"==i.type(o)&&(a=o,o=void 0),o||(o="easeOutCubic"),a=a||i.noop,e?this.setTranslate(t,e):e=this.getTranslate(t),n?(t.show(),h(g)):f()}},i.fn.fancybox=function(t){return this.off("click.fb-start").on("click.fb-start",{items:this,options:t||{}},n),this},i(e).on("click.fb-start","[data-fancybox]",n)}}(window,document,window.jQuery),function(t){"use strict";var e=function(e,i,s){if(e)return s=s||"","object"===t.type(s)&&(s=t.param(s,!0)),t.each(i,function(t,i){e=e.replace("$"+t,i||"")}),s.length&&(e+=(e.indexOf("?")>0?"&":"?")+s),e},i={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"//www.youtube.com/embed/$4",thumb:"//img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1,api:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},metacafe:{matcher:/metacafe.com\/watch\/(\d+)\/(.*)?/,type:"iframe",url:"//www.metacafe.com/embed/$1/?ap=1"},dailymotion:{matcher:/dailymotion.com\/video\/(.*)\/?(.*)/,params:{additionalInfos:0,autoStart:1},type:"iframe",url:"//www.dailymotion.com/embed/video/$1"},vine:{matcher:/vine.co\/v\/([a-zA-Z0-9\?\=\-]+)/,type:"iframe",url:"//vine.co/v/$1/embed/simple"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},google_maps:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(t){return"//maps.google."+t[2]+"/?ll="+(t[9]?t[9]+"&z="+Math.floor(t[10])+(t[12]?t[12].replace(/^\//,"&"):""):t[12])+"&output="+(t[12]&&t[12].indexOf("layer=c")>0?"svembed":"embed")}}};t(document).on("onInit.fb",function(s,n){t.each(n.group,function(s,n){var o,a,r,l,c,h,u=n.src||"",d=!1;n.type||(t.each(i,function(i,s){if(a=u.match(s.matcher),c={},h=i,a){if(d=s.type,s.paramPlace&&a[s.paramPlace]){l=a[s.paramPlace],"?"==l[0]&&(l=l.substring(1)),l=l.split("&");for(var p=0;p<l.length;++p){var f=l[p].split("=",2);2==f.length&&(c[f[0]]=decodeURIComponent(f[1].replace(/\+/g," ")))}}return r=t.extend(!0,{},s.params,n.opts[i],c),u="function"===t.type(s.url)?s.url.call(this,a,r,n):e(s.url,a,r),o="function"===t.type(s.thumb)?s.thumb.call(this,a,r,n):e(s.thumb,a),"vimeo"===h&&(u=u.replace("&%23","#")),!1}}),d?(n.src=u,n.type=d,n.opts.thumb||n.opts.$thumb&&n.opts.$thumb.length||(n.opts.thumb=o),"iframe"===d&&(t.extend(!0,n.opts,{iframe:{preload:!1,scrolling:"no"},smallBtn:!1,closeBtn:!0,fullScreen:!1,slideShow:!1}),n.opts.slideClass+=" fancybox-slide--video")):n.type="iframe")})})}(window.jQuery),function(t,e,i){"use strict";var s=function(){return t.requestAnimationFrame||t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame||function(e){t.setTimeout(e,1e3/60)}}(),n=function(e){var i=[];e=e.originalEvent||e||t.e,e=e.touches&&e.touches.length?e.touches:e.changedTouches&&e.changedTouches.length?e.changedTouches:[e];for(var s in e)e[s].pageX?i.push({x:e[s].pageX,y:e[s].pageY}):e[s].clientX&&i.push({x:e[s].clientX,y:e[s].clientY});return i},o=function(t,e,i){return e&&t?"x"===i?t.x-e.x:"y"===i?t.y-e.y:Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)):0},a=function(t){return t.is("a")||t.is("button")||t.is("input")||t.is("select")||t.is("textarea")||i.isFunction(t.get(0).onclick)},r=function(e){var i=t.getComputedStyle(e)["overflow-y"],s=t.getComputedStyle(e)["overflow-x"],n=("scroll"===i||"auto"===i)&&e.scrollHeight>e.clientHeight,o=("scroll"===s||"auto"===s)&&e.scrollWidth>e.clientWidth;return n||o},l=function(t){for(var e=!1;;){if(e=r(t.get(0)))break;if(t=t.parent(),!t.length||t.hasClass("fancybox-slider")||t.is("body"))break}return e},c=function(t){var e=this;e.instance=t,e.$wrap=t.$refs.slider_wrap,e.$slider=t.$refs.slider,e.$container=t.$refs.container,e.destroy(),e.$wrap.on("touchstart.fb mousedown.fb",i.proxy(e,"ontouchstart"))};c.prototype.destroy=function(){this.$wrap.off("touchstart.fb mousedown.fb touchmove.fb mousemove.fb touchend.fb touchcancel.fb mouseup.fb mouseleave.fb")},c.prototype.ontouchstart=function(e){var s=this,r=i(e.target),c=s.instance,h=c.current,u=h.$content||h.$placeholder;return s.startPoints=n(e),s.$target=r,s.$content=u,s.canvasWidth=Math.round(h.$slide[0].clientWidth),s.canvasHeight=Math.round(h.$slide[0].clientHeight),s.startEvent=e,e.originalEvent.clientX>s.canvasWidth+h.$slide.offset().left||(a(r)||a(r.parent())||l(r)?void 0:h.opts.touch?void(e.originalEvent&&2==e.originalEvent.button||(e.stopPropagation(),e.preventDefault(),!h||s.instance.isAnimating||s.instance.isClosing||!s.startPoints||s.startPoints.length>1&&!h.isMoved||(s.$wrap.off("touchmove.fb mousemove.fb",i.proxy(s,"ontouchmove")),s.$wrap.off("touchend.fb touchcancel.fb mouseup.fb mouseleave.fb",i.proxy(s,"ontouchend")),s.$wrap.on("touchend.fb touchcancel.fb mouseup.fb mouseleave.fb",i.proxy(s,"ontouchend")),s.$wrap.on("touchmove.fb mousemove.fb",i.proxy(s,"ontouchmove")),s.startTime=(new Date).getTime(),s.distanceX=s.distanceY=s.distance=0,s.canTap=!1,s.isPanning=!1,s.isSwiping=!1,s.isZooming=!1,s.sliderStartPos=i.fancybox.getTranslate(s.$slider),s.contentStartPos=i.fancybox.getTranslate(s.$content),s.contentLastPos=null,1!==s.startPoints.length||s.isZooming||(s.canTap=h.isMoved,"image"===h.type&&(s.contentStartPos.width>s.canvasWidth+1||s.contentStartPos.height>s.canvasHeight+1)?(i.fancybox.stop(s.$content),s.isPanning=!0):(i.fancybox.stop(s.$slider),s.isSwiping=!0),s.$container.addClass("fancybox-controls--isGrabbing")),2===s.startPoints.length&&h.isMoved&&!h.hasError&&"image"===h.type&&(h.isLoaded||h.$ghost)&&(s.isZooming=!0,s.isSwiping=!1,s.isPanning=!1,i.fancybox.stop(s.$content),s.centerPointStartX=.5*(s.startPoints[0].x+s.startPoints[1].x)-i(t).scrollLeft(),s.centerPointStartY=.5*(s.startPoints[0].y+s.startPoints[1].y)-i(t).scrollTop(),s.percentageOfImageAtPinchPointX=(s.centerPointStartX-s.contentStartPos.left)/s.contentStartPos.width,s.percentageOfImageAtPinchPointY=(s.centerPointStartY-s.contentStartPos.top)/s.contentStartPos.height,s.startDistanceBetweenFingers=o(s.startPoints[0],s.startPoints[1]))))):(s.endPoints=s.startPoints,s.ontap()))},c.prototype.ontouchmove=function(t){var e=this;t.preventDefault(),e.newPoints=n(t),e.newPoints&&e.newPoints.length&&(e.distanceX=o(e.newPoints[0],e.startPoints[0],"x"),e.distanceY=o(e.newPoints[0],e.startPoints[0],"y"),e.distance=o(e.newPoints[0],e.startPoints[0]),e.distance>0&&(e.isSwiping?e.onSwipe():e.isPanning?e.onPan():e.isZooming&&e.onZoom()))},c.prototype.onSwipe=function(){var e,n=this,o=n.isSwiping,a=n.sliderStartPos.left
;!0===o?Math.abs(n.distance)>10&&(n.instance.group.length<2?n.isSwiping="y":!n.instance.current.isMoved||!1===n.instance.opts.touch.vertical||"auto"===n.instance.opts.touch.vertical&&i(t).width()>800?n.isSwiping="x":(e=Math.abs(180*Math.atan2(n.distanceY,n.distanceX)/Math.PI),n.isSwiping=e>45&&e<135?"y":"x"),n.canTap=!1,n.instance.current.isMoved=!1,n.startPoints=n.newPoints):("x"==o&&(!n.instance.current.opts.loop&&0===n.instance.current.index&&n.distanceX>0?a+=Math.pow(n.distanceX,.8):!n.instance.current.opts.loop&&n.instance.current.index===n.instance.group.length-1&&n.distanceX<0?a-=Math.pow(-n.distanceX,.8):a+=n.distanceX),n.sliderLastPos={top:"x"==o?0:n.sliderStartPos.top+n.distanceY,left:a},s(function(){i.fancybox.setTranslate(n.$slider,n.sliderLastPos)}))},c.prototype.onPan=function(){var t,e,n,o=this;o.canTap=!1,t=o.contentStartPos.width>o.canvasWidth?o.contentStartPos.left+o.distanceX:o.contentStartPos.left,e=o.contentStartPos.top+o.distanceY,n=o.limitMovement(t,e,o.contentStartPos.width,o.contentStartPos.height),n.scaleX=o.contentStartPos.scaleX,n.scaleY=o.contentStartPos.scaleY,o.contentLastPos=n,s(function(){i.fancybox.setTranslate(o.$content,o.contentLastPos)})},c.prototype.limitMovement=function(t,e,i,s){var n,o,a,r,l=this,c=l.canvasWidth,h=l.canvasHeight,u=l.contentStartPos.left,d=l.contentStartPos.top,p=l.distanceX,f=l.distanceY;return n=Math.max(0,.5*c-.5*i),o=Math.max(0,.5*h-.5*s),a=Math.min(c-i,.5*c-.5*i),r=Math.min(h-s,.5*h-.5*s),i>c&&(p>0&&t>n&&(t=n-1+Math.pow(-n+u+p,.8)||0),p<0&&t<a&&(t=a+1-Math.pow(a-u-p,.8)||0)),s>h&&(f>0&&e>o&&(e=o-1+Math.pow(-o+d+f,.8)||0),f<0&&e<r&&(e=r+1-Math.pow(r-d-f,.8)||0)),{top:e,left:t}},c.prototype.limitPosition=function(t,e,i,s){var n=this,o=n.canvasWidth,a=n.canvasHeight;return i>o?(t=t>0?0:t,t=t<o-i?o-i:t):t=Math.max(0,o/2-i/2),s>a?(e=e>0?0:e,e=e<a-s?a-s:e):e=Math.max(0,a/2-s/2),{top:e,left:t}},c.prototype.onZoom=function(){var e=this,n=e.contentStartPos.width,a=e.contentStartPos.height,r=e.contentStartPos.left,l=e.contentStartPos.top,c=o(e.newPoints[0],e.newPoints[1]),h=c/e.startDistanceBetweenFingers,u=Math.floor(n*h),d=Math.floor(a*h),p=(n-u)*e.percentageOfImageAtPinchPointX,f=(a-d)*e.percentageOfImageAtPinchPointY,g=(e.newPoints[0].x+e.newPoints[1].x)/2-i(t).scrollLeft(),m=(e.newPoints[0].y+e.newPoints[1].y)/2-i(t).scrollTop(),v=g-e.centerPointStartX,y=m-e.centerPointStartY,b=r+(p+v),w=l+(f+y),x={top:w,left:b,scaleX:e.contentStartPos.scaleX*h,scaleY:e.contentStartPos.scaleY*h};e.canTap=!1,e.newWidth=u,e.newHeight=d,e.contentLastPos=x,s(function(){i.fancybox.setTranslate(e.$content,e.contentLastPos)})},c.prototype.ontouchend=function(t){var e=this,s=e.instance.current,o=Math.max((new Date).getTime()-e.startTime,1),a=e.isSwiping,r=e.isPanning,l=e.isZooming;if(e.endPoints=n(t),e.$container.removeClass("fancybox-controls--isGrabbing"),e.$wrap.off("touchmove.fb mousemove.fb",i.proxy(this,"ontouchmove")),e.$wrap.off("touchend.fb touchcancel.fb mouseup.fb mouseleave.fb",i.proxy(this,"ontouchend")),e.isSwiping=!1,e.isPanning=!1,e.isZooming=!1,e.canTap)return e.ontap();e.velocityX=e.distanceX/o*.5,e.velocityY=e.distanceY/o*.5,e.speed=s.opts.speed||330,e.speedX=Math.max(.75*e.speed,Math.min(1.5*e.speed,1/Math.abs(e.velocityX)*e.speed)),e.speedY=Math.max(.75*e.speed,Math.min(1.5*e.speed,1/Math.abs(e.velocityY)*e.speed)),r?e.endPanning():l?e.endZooming():e.endSwiping(a)},c.prototype.endSwiping=function(t){var e=this;"y"==t&&Math.abs(e.distanceY)>50?(i.fancybox.animate(e.$slider,null,{top:e.sliderStartPos.top+e.distanceY+150*e.velocityY,left:e.sliderStartPos.left,opacity:0},e.speedY),e.instance.close(!0)):"x"==t&&e.distanceX>50?e.instance.previous(e.speedX):"x"==t&&e.distanceX<-50?e.instance.next(e.speedX):e.instance.update(!1,!0,150)},c.prototype.endPanning=function(){var t,e,s,n=this;n.contentLastPos&&(t=n.contentLastPos.left+n.velocityX*n.speed*2,e=n.contentLastPos.top+n.velocityY*n.speed*2,s=n.limitPosition(t,e,n.contentStartPos.width,n.contentStartPos.height),s.width=n.contentStartPos.width,s.height=n.contentStartPos.height,i.fancybox.animate(n.$content,null,s,n.speed,"easeOutSine"))},c.prototype.endZooming=function(){var t,e,s,n,o=this,a=o.instance.current,r=o.newWidth,l=o.newHeight;o.contentLastPos&&(t=o.contentLastPos.left,e=o.contentLastPos.top,n={top:e,left:t,width:r,height:l,scaleX:1,scaleY:1},i.fancybox.setTranslate(o.$content,n),r<o.canvasWidth&&l<o.canvasHeight?o.instance.scaleToFit(150):r>a.width||l>a.height?o.instance.scaleToActual(o.centerPointStartX,o.centerPointStartY,150):(s=o.limitPosition(t,e,r,l),i.fancybox.animate(o.$content,null,s,o.speed,"easeOutSine")))},c.prototype.ontap=function(){var t=this,e=t.instance,s=e.current,n=t.endPoints[0].x,o=t.endPoints[0].y;if(n-=t.$wrap.offset().left,o-=t.$wrap.offset().top,e.SlideShow&&e.SlideShow.isActive&&e.SlideShow.stop(),!i.fancybox.isTouch)return s.opts.closeClickOutside&&t.$target.is(".fancybox-slide")?void e.close(t.startEvent):void("image"==s.type&&s.isMoved&&(e.canPan()?e.scaleToFit():e.isScaledDown()?e.scaleToActual(n,o):e.group.length<2&&e.close(t.startEvent)));if(t.tapped){if(clearTimeout(t.tapped),t.tapped=null,Math.abs(n-t.x)>50||Math.abs(o-t.y)>50||!s.isMoved)return this;"image"==s.type&&(s.isLoaded||s.$ghost)&&(e.canPan()?e.scaleToFit():e.isScaledDown()&&e.scaleToActual(n,o))}else t.x=n,t.y=o,t.tapped=setTimeout(function(){t.tapped=null,e.toggleControls(!0)},300);return this},i(e).on("onActivate.fb",function(t,e){e&&!e.Guestures&&(e.Guestures=new c(e))}),i(e).on("beforeClose.fb",function(t,e){e&&e.Guestures&&e.Guestures.destroy()})}(window,document,window.jQuery),function(t,e){"use strict";var i=function(t){this.instance=t,this.init()};e.extend(i.prototype,{timer:null,isActive:!1,$button:null,speed:3e3,init:function(){var t=this;t.$button=e('<button data-fancybox-play class="fancybox-button fancybox-button--play" title="Slideshow (P)"></button>').appendTo(t.instance.$refs.buttons),t.instance.$refs.container.on("click","[data-fancybox-play]",function(){t.toggle()})},set:function(){var t=this;t.instance&&t.instance.current&&(t.instance.current.opts.loop||t.instance.currIndex<t.instance.group.length-1)?t.timer=setTimeout(function(){t.instance.next()},t.instance.current.opts.slideShow.speed||t.speed):t.stop()},clear:function(){var t=this;clearTimeout(t.timer),t.timer=null},start:function(){var t=this;t.stop(),t.instance&&t.instance.current&&(t.instance.current.opts.loop||t.instance.currIndex<t.instance.group.length-1)&&(t.instance.$refs.container.on({"beforeLoad.fb.player":e.proxy(t,"clear"),"onComplete.fb.player":e.proxy(t,"set")}),t.isActive=!0,t.instance.current.isComplete&&t.set(),t.instance.$refs.container.trigger("onPlayStart"),t.$button.addClass("fancybox-button--pause"))},stop:function(){var t=this;t.clear(),t.instance.$refs.container.trigger("onPlayEnd").off(".player"),t.$button.removeClass("fancybox-button--pause"),t.isActive=!1},toggle:function(){var t=this;t.isActive?t.stop():t.start()}}),e(t).on("onInit.fb",function(t,e){e&&e.group.length>1&&e.opts.slideShow&&!e.SlideShow&&(e.SlideShow=new i(e))}),e(t).on("beforeClose.fb onDeactivate.fb",function(t,e){e&&e.SlideShow&&e.SlideShow.stop()})}(document,window.jQuery),function(t,e){"use strict";var i=function(){var e,i,s,n=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],o={};for(i=0;i<n.length;i++)if((e=n[i])&&e[1]in t){for(s=0;s<e.length;s++)o[n[0][s]]=e[s];return o}return!1}();if(i){var s={request:function(e){e=e||t.documentElement,e[i.requestFullscreen](e.ALLOW_KEYBOARD_INPUT)},exit:function(){t[i.exitFullscreen]()},toggle:function(t){this.isFullscreen()?this.exit():this.request(t)},isFullscreen:function(){return Boolean(t[i.fullscreenElement])},enabled:function(){return Boolean(t[i.fullscreenEnabled])}};e(t).on({"onInit.fb":function(t,i){var n;i&&i.opts.fullScreen&&!i.FullScreen&&(n=i.$refs.container,i.$refs.button_fs=e('<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fullscreen" title="Full screen (F)"></button>').appendTo(i.$refs.buttons),n.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(t){t.stopPropagation(),t.preventDefault(),s.toggle(n[0])}),!0===i.opts.fullScreen.requestOnStart&&s.request(n[0]))},"beforeMove.fb":function(t,e){e&&e.$refs.button_fs&&e.$refs.button_fs.toggle(!!e.current.opts.fullScreen)},"beforeClose.fb":function(){s.exit()}}),e(t).on(i.fullscreenchange,function(){var t=e.fancybox.getInstance(),i=t?t.current.$placeholder:null;i&&(i.css("transition","none"),t.isAnimating=!1,t.update(!0,!0,0))})}}(document,window.jQuery),function(t,e){"use strict";var i=function(t){this.instance=t,this.init()};e.extend(i.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,init:function(){var t=this;t.$button=e('<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="Thumbnails (G)"></button>').appendTo(this.instance.$refs.buttons).on("touchend click",function(e){e.stopPropagation(),e.preventDefault(),t.toggle()})},create:function(){var t,i,s=this.instance;this.$grid=e('<div class="fancybox-thumbs"></div>').appendTo(s.$refs.container),t="<ul>",e.each(s.group,function(e,s){i=s.opts.thumb||(s.opts.$thumb?s.opts.$thumb.attr("src"):null),i||"image"!==s.type||(i=s.src),i&&i.length&&(t+='<li data-index="'+e+'"  tabindex="0" class="fancybox-thumbs-loading"><img data-src="'+i+'" /></li>')}),t+="</ul>",this.$list=e(t).appendTo(this.$grid).on("click touchstart","li",function(){s.jumpTo(e(this).data("index"))}),this.$list.find("img").hide().one("load",function(){var t,i,s,n,o=e(this).parent().removeClass("fancybox-thumbs-loading"),a=o.outerWidth(),r=o.outerHeight();t=this.naturalWidth||this.width,i=this.naturalHeight||this.height,s=t/a,n=i/r,s>=1&&n>=1&&(s>n?(t/=n,i=r):(t=a,i/=s)),e(this).css({width:Math.floor(t),height:Math.floor(i),"margin-top":Math.min(0,Math.floor(.3*r-.3*i)),"margin-left":Math.min(0,Math.floor(.5*a-.5*t))}).show()}).each(function(){this.src=e(this).data("src")})},focus:function(){this.instance.current&&this.$list.children().removeClass("fancybox-thumbs-active").filter('[data-index="'+this.instance.current.index+'"]').addClass("fancybox-thumbs-active").focus()},close:function(){this.$grid.hide()},update:function(){this.instance.$refs.container.toggleClass("fancybox-container--thumbs",this.isVisible),this.isVisible?(this.$grid||this.create(),this.$grid.show(),this.focus()):this.$grid&&this.$grid.hide(),this.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible?this.hide():this.show()}}),e(t).on("onInit.fb",function(t,e){var s=e.group[0],n=e.group[1];e.opts.thumbs&&!e.Thumbs&&e.group.length>1&&("image"==s.type||s.opts.thumb||s.opts.$thumb)&&("image"==n.type||n.opts.thumb||n.opts.$thumb)&&(e.Thumbs=new i(e))}),e(t).on("beforeMove.fb",function(t,e,i){var s=e&&e.Thumbs;s&&(i.modal?(s.$button.hide(),s.hide()):(!0===e.opts.thumbs.showOnStart&&e.firstRun&&s.show(),s.$button.show(),s.isVisible&&s.focus()))}),e(t).on("beforeClose.fb",function(t,e){e&&e.Thumbs&&(e.Thumbs.isVisible&&!1!==e.opts.thumbs.hideOnClosing&&e.Thumbs.close(),e.Thumbs=null)})}(document,window.jQuery),function(t,e,i){"use strict";function s(){var t=e.location.hash.substr(1),i=t.split("-"),s=i.length>1&&/^\+?\d+$/.test(i[i.length-1])?parseInt(i.pop(-1),10)||1:1,n=i.join("-");return s<1&&(s=1),{hash:t,index:s,gallery:n}}function n(t){var e;""!==t.gallery&&(e=i("[data-fancybox='"+i.escapeSelector(t.gallery)+"']").eq(t.index-1),e.length?e.trigger("click"):i("#"+i.escapeSelector(t.gallery)).trigger("click"))}function o(t){var e;return!!t&&(e=t.current?t.current.opts:t.opts,e.$orig?e.$orig.data("fancybox"):e.hash||"")}i.escapeSelector||(i.escapeSelector=function(t){return(t+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t})});var a=null;i(function(){setTimeout(function(){!1!==i.fancybox.defaults.hash&&(i(e).on("hashchange.fb",function(){var t=s();i.fancybox.getInstance()?a&&a!==t.gallery+"-"+t.index&&(a=null,i.fancybox.close()):""!==t.gallery&&n(t)}),i(t).on({"onInit.fb":function(t,e){var i=s(),n=o(e);n&&i.gallery&&n==i.gallery&&(e.currIndex=i.index-1)},"beforeMove.fb":function(i,s,n){var r=o(s);r&&""!==r&&(e.location.hash.indexOf(r)<0&&(s.opts.origHash=e.location.hash),a=r+(s.group.length>1?"-"+(n.index+1):""),"pushState"in history?history.pushState("",t.title,e.location.pathname+e.location.search+"#"+a):e.location.hash=a)},"beforeClose.fb":function(i,s,n){var r=o(s),l=s&&s.opts.origHash?s.opts.origHash:"";r&&""!==r&&("pushState"in history?history.pushState("",t.title,e.location.pathname+e.location.search+l):e.location.hash=l),a=null}}),n(s()))},50)})}(document,window,window.jQuery),function(t,e,i,s){function n(e,i){this.settings=null,this.options=t.extend({},n.Defaults,i),this.$element=t(e),this._handlers={},this._plugins={},this._supress={},this._current=null,this._speed=null,this._coordinates=[],this._breakpoint=null,this._width=null,this._items=[],this._clones=[],this._mergers=[],this._widths=[],this._invalidated={},this._pipe=[],this._drag={time:null,target:null,pointer:null,stage:{start:null,current:null},direction:null},this._states={current:{},tags:{initializing:["busy"],animating:["busy"],dragging:["interacting"]}},t.each(["onResize","onThrottledResize"],t.proxy(function(e,i){this._handlers[i]=t.proxy(this[i],this)},this)),t.each(n.Plugins,t.proxy(function(t,e){this._plugins[t.charAt(0).toLowerCase()+t.slice(1)]=new e(this)},this)),t.each(n.Workers,t.proxy(function(e,i){this._pipe.push({filter:i.filter,run:t.proxy(i.run,this)})},this)),this.setup(),this.initialize()}n.Defaults={items:3,loop:!1,center:!1,rewind:!1,mouseDrag:!0,touchDrag:!0,pullDrag:!0,freeDrag:!1,margin:0,stagePadding:0,merge:!1,mergeFit:!0,autoWidth:!1,startPosition:0,rtl:!1,smartSpeed:250,fluidSpeed:!1,dragEndSpeed:!1,responsive:{},responsiveRefreshRate:200,responsiveBaseElement:e,fallbackEasing:"swing",info:!1,nestedItemSelector:!1,itemElement:"div",stageElement:"div",refreshClass:"owl-refresh",loadedClass:"owl-loaded",loadingClass:"owl-loading",rtlClass:"owl-rtl",responsiveClass:"owl-responsive",dragClass:"owl-drag",itemClass:"owl-item",stageClass:"owl-stage",stageOuterClass:"owl-stage-outer",grabClass:"owl-grab"},n.Width={Default:"default",Inner:"inner",Outer:"outer"},n.Type={Event:"event",State:"state"},n.Plugins={},n.Workers=[{filter:["width","settings"],run:function(){this._width=this.$element.width()}},{filter:["width","items","settings"],run:function(t){t.current=this._items&&this._items[this.relative(this._current)]}},{filter:["items","settings"],run:function(){this.$stage.children(".cloned").remove()}},{filter:["width","items","settings"],run:function(t){var e=this.settings.margin||"",i=!this.settings.autoWidth,s=this.settings.rtl,n={width:"auto","margin-left":s?e:"","margin-right":s?"":e};!i&&this.$stage.children().css(n),t.css=n}},{filter:["width","items","settings"],run:function(t){var e=(this.width()/this.settings.items).toFixed(3)-this.settings.margin,i=null,s=this._items.length,n=!this.settings.autoWidth,o=[];for(t.items={merge:!1,width:e};s--;)i=this._mergers[s],i=this.settings.mergeFit&&Math.min(i,this.settings.items)||i,t.items.merge=i>1||t.items.merge,o[s]=n?e*i:this._items[s].width();this._widths=o}},{filter:["items","settings"],run:function(){var e=[],i=this._items,s=this.settings,n=Math.max(2*s.items,4),o=2*Math.ceil(i.length/2),a=s.loop&&i.length?s.rewind?n:Math.max(n,o):0,r="",l="";for(a/=2;a--;)e.push(this.normalize(e.length/2,!0)),r+=i[e[e.length-1]][0].outerHTML,e.push(this.normalize(i.length-1-(e.length-1)/2,!0)),l=i[e[e.length-1]][0].outerHTML+l;this._clones=e,t(r).addClass("cloned").appendTo(this.$stage),t(l).addClass("cloned").prependTo(this.$stage)}},{filter:["width","items","settings"],run:function(){for(var t=this.settings.rtl?1:-1,e=this._clones.length+this._items.length,i=-1,s=0,n=0,o=[];++i<e;)s=o[i-1]||0,n=this._widths[this.relative(i)]+this.settings.margin,o.push(s+n*t);this._coordinates=o}},{filter:["width","items","settings"],run:function(){var t=this.settings.stagePadding,e=this._coordinates,i={width:Math.ceil(Math.abs(e[e.length-1]))+2*t,"padding-left":t||"","padding-right":t||""};this.$stage.css(i)}},{filter:["width","items","settings"],run:function(t){var e=this._coordinates.length,i=!this.settings.autoWidth,s=this.$stage.children();if(i&&t.items.merge)for(;e--;)t.css.width=this._widths[this.relative(e)],s.eq(e).css(t.css);else i&&(t.css.width=t.items.width,s.css(t.css))}},{filter:["items"],run:function(){this._coordinates.length<1&&this.$stage.removeAttr("style")}},{filter:["width","items","settings"],run:function(t){t.current=t.current?this.$stage.children().index(t.current):0,t.current=Math.max(this.minimum(),Math.min(this.maximum(),t.current)),this.reset(t.current)}},{filter:["position"],run:function(){this.animate(this.coordinates(this._current))}},{filter:["width","position","items","settings"],run:function(){var t,e,i,s,n=this.settings.rtl?1:-1,o=2*this.settings.stagePadding,a=this.coordinates(this.current())+o,r=a+this.width()*n,l=[];for(i=0,s=this._coordinates.length;i<s;i++)t=this._coordinates[i-1]||0,e=Math.abs(this._coordinates[i])+o*n,(this.op(t,"<=",a)&&this.op(t,">",r)||this.op(e,"<",a)&&this.op(e,">",r))&&l.push(i);this.$stage.children(".active").removeClass("active"),this.$stage.children(":eq("+l.join("), :eq(")+")").addClass("active"),this.settings.center&&(this.$stage.children(".center").removeClass("center"),this.$stage.children().eq(this.current()).addClass("center"))}}],n.prototype.initialize=function(){if(this.enter("initializing"),this.trigger("initialize"),this.$element.toggleClass(this.settings.rtlClass,this.settings.rtl),this.settings.autoWidth&&!this.is("pre-loading")){var e,i,s;e=this.$element.find("img"),i=this.settings.nestedItemSelector?"."+this.settings.nestedItemSelector:void 0,s=this.$element.children(i).width(),e.length&&s<=0&&this.preloadAutoWidthImages(e)}this.$element.addClass(this.options.loadingClass),this.$stage=t("<"+this.settings.stageElement+' class="'+this.settings.stageClass+'"/>').wrap('<div class="'+this.settings.stageOuterClass+'"/>'),this.$element.append(this.$stage.parent()),this.replace(this.$element.children().not(this.$stage.parent())),this.$element.is(":visible")?this.refresh():this.invalidate("width"),this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass),this.registerEventHandlers(),this.leave("initializing"),this.trigger("initialized")},n.prototype.setup=function(){var e=this.viewport(),i=this.options.responsive,s=-1,n=null;i?(t.each(i,function(t){t<=e&&t>s&&(s=Number(t))}),n=t.extend({},this.options,i[s]),"function"==typeof n.stagePadding&&(n.stagePadding=n.stagePadding()),delete n.responsive,n.responsiveClass&&this.$element.attr("class",this.$element.attr("class").replace(new RegExp("("+this.options.responsiveClass+"-)\\S+\\s","g"),"$1"+s))):n=t.extend({},this.options),this.trigger("change",{property:{name:"settings",value:n}}),this._breakpoint=s,this.settings=n,this.invalidate("settings"),this.trigger("changed",{property:{name:"settings",value:this.settings}})},n.prototype.optionsLogic=function(){this.settings.autoWidth&&(this.settings.stagePadding=!1,this.settings.merge=!1)},n.prototype.prepare=function(e){var i=this.trigger("prepare",{content:e});return i.data||(i.data=t("<"+this.settings.itemElement+"/>").addClass(this.options.itemClass).append(e)),this.trigger("prepared",{content:i.data}),i.data},n.prototype.update=function(){for(var e=0,i=this._pipe.length,s=t.proxy(function(t){return this[t]},this._invalidated),n={};e<i;)(this._invalidated.all||t.grep(this._pipe[e].filter,s).length>0)&&this._pipe[e].run(n),e++;this._invalidated={},!this.is("valid")&&this.enter("valid")},n.prototype.width=function(t){switch(t=t||n.Width.Default){case n.Width.Inner:case n.Width.Outer:return this._width;default:return this._width-2*this.settings.stagePadding+this.settings.margin}},n.prototype.refresh=function(){this.enter("refreshing"),this.trigger("refresh"),this.setup(),this.optionsLogic(),this.$element.addClass(this.options.refreshClass),this.update(),this.$element.removeClass(this.options.refreshClass),this.leave("refreshing"),this.trigger("refreshed")},n.prototype.onThrottledResize=function(){e.clearTimeout(this.resizeTimer),this.resizeTimer=e.setTimeout(this._handlers.onResize,this.settings.responsiveRefreshRate)},n.prototype.onResize=function(){return!!this._items.length&&(this._width!==this.$element.width()&&(!!this.$element.is(":visible")&&(this.enter("resizing"),this.trigger("resize").isDefaultPrevented()?(this.leave("resizing"),!1):(this.invalidate("width"),this.refresh(),this.leave("resizing"),void this.trigger("resized")))))},n.prototype.registerEventHandlers=function(){t.support.transition&&this.$stage.on(t.support.transition.end+".owl.core",t.proxy(this.onTransitionEnd,this)),!1!==this.settings.responsive&&this.on(e,"resize",this._handlers.onThrottledResize),this.settings.mouseDrag&&(this.$element.addClass(this.options.dragClass),this.$stage.on("mousedown.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("dragstart.owl.core selectstart.owl.core",function(){return!1})),this.settings.touchDrag&&(this.$stage.on("touchstart.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("touchcancel.owl.core",t.proxy(this.onDragEnd,this)))},n.prototype.onDragStart=function(e){var s=null;3!==e.which&&(t.support.transform?(s=this.$stage.css("transform").replace(/.*\(|\)| /g,"").split(","),s={x:s[16===s.length?12:4],y:s[16===s.length?13:5]}):(s=this.$stage.position(),s={x:this.settings.rtl?s.left+this.$stage.width()-this.width()+this.settings.margin:s.left,y:s.top}),this.is("animating")&&(t.support.transform?this.animate(s.x):this.$stage.stop(),this.invalidate("position")),this.$element.toggleClass(this.options.grabClass,"mousedown"===e.type),this.speed(0),this._drag.time=(new Date).getTime(),this._drag.target=t(e.target),this._drag.stage.start=s,this._drag.stage.current=s,this._drag.pointer=this.pointer(e),t(i).on("mouseup.owl.core touchend.owl.core",t.proxy(this.onDragEnd,this)),t(i).one("mousemove.owl.core touchmove.owl.core",t.proxy(function(e){var s=this.difference(this._drag.pointer,this.pointer(e));t(i).on("mousemove.owl.core touchmove.owl.core",t.proxy(this.onDragMove,this)),Math.abs(s.x)<Math.abs(s.y)&&this.is("valid")||(e.preventDefault(),this.enter("dragging"),this.trigger("drag"))},this)))},n.prototype.onDragMove=function(t){var e=null,i=null,s=null,n=this.difference(this._drag.pointer,this.pointer(t)),o=this.difference(this._drag.stage.start,n);this.is("dragging")&&(t.preventDefault(),this.settings.loop?(e=this.coordinates(this.minimum()),i=this.coordinates(this.maximum()+1)-e,o.x=((o.x-e)%i+i)%i+e):(e=this.settings.rtl?this.coordinates(this.maximum()):this.coordinates(this.minimum()),i=this.settings.rtl?this.coordinates(this.minimum()):this.coordinates(this.maximum()),s=this.settings.pullDrag?-1*n.x/5:0,o.x=Math.max(Math.min(o.x,e+s),i+s)),this._drag.stage.current=o,this.animate(o.x))},n.prototype.onDragEnd=function(e){var s=this.difference(this._drag.pointer,this.pointer(e)),n=this._drag.stage.current,o=s.x>0^this.settings.rtl?"left":"right";t(i).off(".owl.core"),this.$element.removeClass(this.options.grabClass),(0!==s.x&&this.is("dragging")||!this.is("valid"))&&(this.speed(this.settings.dragEndSpeed||this.settings.smartSpeed),this.current(this.closest(n.x,0!==s.x?o:this._drag.direction)),this.invalidate("position"),this.update(),this._drag.direction=o,(Math.abs(s.x)>3||(new Date).getTime()-this._drag.time>300)&&this._drag.target.one("click.owl.core",function(){return!1})),this.is("dragging")&&(this.leave("dragging"),this.trigger("dragged"))},n.prototype.closest=function(e,i){var s=-1,n=this.width(),o=this.coordinates();return this.settings.freeDrag||t.each(o,t.proxy(function(t,a){return"left"===i&&e>a-30&&e<a+30?s=t:"right"===i&&e>a-n-30&&e<a-n+30?s=t+1:this.op(e,"<",a)&&this.op(e,">",o[t+1]||a-n)&&(s="left"===i?t+1:t),-1===s},this)),this.settings.loop||(this.op(e,">",o[this.minimum()])?s=e=this.minimum():this.op(e,"<",o[this.maximum()])&&(s=e=this.maximum())),s},n.prototype.animate=function(e){var i=this.speed()>0;this.is("animating")&&this.onTransitionEnd(),i&&(this.enter("animating"),this.trigger("translate")),t.support.transform3d&&t.support.transition?this.$stage.css({transform:"translate3d("+e+"px,0px,0px)",transition:this.speed()/1e3+"s"}):i?this.$stage.animate({left:e+"px"},this.speed(),this.settings.fallbackEasing,t.proxy(this.onTransitionEnd,this)):this.$stage.css({left:e+"px"})},n.prototype.is=function(t){return this._states.current[t]&&this._states.current[t]>0},n.prototype.current=function(t){if(void 0===t)return this._current;if(0!==this._items.length){if(t=this.normalize(t),this._current!==t){var e=this.trigger("change",{property:{name:"position",value:t}});void 0!==e.data&&(t=this.normalize(e.data)),this._current=t,this.invalidate("position"),this.trigger("changed",{property:{name:"position",value:this._current}})}return this._current}},n.prototype.invalidate=function(e){return"string"===t.type(e)&&(this._invalidated[e]=!0,this.is("valid")&&this.leave("valid")),t.map(this._invalidated,function(t,e){return e})},n.prototype.reset=function(t){void 0!==(t=this.normalize(t))&&(this._speed=0,this._current=t,this.suppress(["translate","translated"]),this.animate(this.coordinates(t)),this.release(["translate","translated"]))},n.prototype.normalize=function(t,e){var i=this._items.length,s=e?0:this._clones.length;return!this.isNumeric(t)||i<1?t=void 0:(t<0||t>=i+s)&&(t=((t-s/2)%i+i)%i+s/2),t},n.prototype.relative=function(t){return t-=this._clones.length/2,this.normalize(t,!0)},n.prototype.maximum=function(t){var e,i,s,n=this.settings,o=this._coordinates.length;if(n.loop)o=this._clones.length/2+this._items.length-1;else if(n.autoWidth||n.merge){for(e=this._items.length,i=this._items[--e].width(),s=this.$element.width();e--&&!((i+=this._items[e].width()+this.settings.margin)>s););o=e+1}else o=n.center?this._items.length-1:this._items.length-n.items;return t&&(o-=this._clones.length/2),Math.max(o,0)},n.prototype.minimum=function(t){return t?0:this._clones.length/2},n.prototype.items=function(t){return void 0===t?this._items.slice():(t=this.normalize(t,!0),this._items[t])},n.prototype.mergers=function(t){return void 0===t?this._mergers.slice():(t=this.normalize(t,!0),this._mergers[t])},n.prototype.clones=function(e){var i=this._clones.length/2,s=i+this._items.length,n=function(t){return t%2==0?s+t/2:i-(t+1)/2};return void 0===e?t.map(this._clones,function(t,e){return n(e)}):t.map(this._clones,function(t,i){return t===e?n(i):null})},n.prototype.speed=function(t){return void 0!==t&&(this._speed=t),this._speed},n.prototype.coordinates=function(e){var i,s=1,n=e-1;return void 0===e?t.map(this._coordinates,t.proxy(function(t,e){return this.coordinates(e)},this)):(this.settings.center?(this.settings.rtl&&(s=-1,n=e+1),i=this._coordinates[e],i+=(this.width()-i+(this._coordinates[n]||0))/2*s):i=this._coordinates[n]||0,i=Math.ceil(i))},n.prototype.duration=function(t,e,i){return 0===i?0:Math.min(Math.max(Math.abs(e-t),1),6)*Math.abs(i||this.settings.smartSpeed)},n.prototype.to=function(t,e){var i=this.current(),s=null,n=t-this.relative(i),o=(n>0)-(n<0),a=this._items.length,r=this.minimum(),l=this.maximum();this.settings.loop?(!this.settings.rewind&&Math.abs(n)>a/2&&(n+=-1*o*a),t=i+n,(s=((t-r)%a+a)%a+r)!==t&&s-n<=l&&s-n>0&&(i=s-n,t=s,this.reset(i))):this.settings.rewind?(l+=1,t=(t%l+l)%l):t=Math.max(r,Math.min(l,t)),this.speed(this.duration(i,t,e)),this.current(t),this.$element.is(":visible")&&this.update()},n.prototype.next=function(t){t=t||!1,this.to(this.relative(this.current())+1,t)},n.prototype.prev=function(t){t=t||!1,this.to(this.relative(this.current())-1,t)},n.prototype.onTransitionEnd=function(t){if(void 0!==t&&(t.stopPropagation(),(t.target||t.srcElement||t.originalTarget)!==this.$stage.get(0)))return!1;this.leave("animating"),this.trigger("translated")},n.prototype.viewport=function(){var s;return this.options.responsiveBaseElement!==e?s=t(this.options.responsiveBaseElement).width():e.innerWidth?s=e.innerWidth:i.documentElement&&i.documentElement.clientWidth?s=i.documentElement.clientWidth:console.warn("Can not detect viewport width."),s},n.prototype.replace=function(e){this.$stage.empty(),this._items=[],e&&(e=e instanceof jQuery?e:t(e)),this.settings.nestedItemSelector&&(e=e.find("."+this.settings.nestedItemSelector)),e.filter(function(){return 1===this.nodeType}).each(t.proxy(function(t,e){e=this.prepare(e),this.$stage.append(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)},this)),this.reset(this.isNumeric(this.settings.startPosition)?this.settings.startPosition:0),this.invalidate("items")},n.prototype.add=function(e,i){var s=this.relative(this._current);i=void 0===i?this._items.length:this.normalize(i,!0),e=e instanceof jQuery?e:t(e),this.trigger("add",{content:e,position:i}),e=this.prepare(e),0===this._items.length||i===this._items.length?(0===this._items.length&&this.$stage.append(e),0!==this._items.length&&this._items[i-1].after(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)):(this._items[i].before(e),this._items.splice(i,0,e),this._mergers.splice(i,0,1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)),this._items[s]&&this.reset(this._items[s].index()),this.invalidate("items"),this.trigger("added",{content:e,position:i})},n.prototype.remove=function(t){void 0!==(t=this.normalize(t,!0))&&(this.trigger("remove",{content:this._items[t],position:t}),this._items[t].remove(),this._items.splice(t,1),this._mergers.splice(t,1),this.invalidate("items"),this.trigger("removed",{content:null,position:t}))},n.prototype.preloadAutoWidthImages=function(e){e.each(t.proxy(function(e,i){this.enter("pre-loading"),i=t(i),t(new Image).one("load",t.proxy(function(t){i.attr("src",t.target.src),i.css("opacity",1),this.leave("pre-loading"),!this.is("pre-loading")&&!this.is("initializing")&&this.refresh()},this)).attr("src",i.attr("src")||i.attr("data-src")||i.attr("data-src-retina"))},this))},n.prototype.destroy=function(){this.$element.off(".owl.core"),this.$stage.off(".owl.core"),t(i).off(".owl.core"),!1!==this.settings.responsive&&(e.clearTimeout(this.resizeTimer),this.off(e,"resize",this._handlers.onThrottledResize));for(var s in this._plugins)this._plugins[s].destroy();this.$stage.children(".cloned").remove(),this.$stage.unwrap(),this.$stage.children().contents().unwrap(),this.$stage.children().unwrap(),this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class",this.$element.attr("class").replace(new RegExp(this.options.responsiveClass+"-\\S+\\s","g"),"")).removeData("owl.carousel")},n.prototype.op=function(t,e,i){var s=this.settings.rtl;switch(e){case"<":return s?t>i:t<i;case">":return s?t<i:t>i;case">=":return s?t<=i:t>=i;case"<=":return s?t>=i:t<=i}},n.prototype.on=function(t,e,i,s){t.addEventListener?t.addEventListener(e,i,s):t.attachEvent&&t.attachEvent("on"+e,i)
},n.prototype.off=function(t,e,i,s){t.removeEventListener?t.removeEventListener(e,i,s):t.detachEvent&&t.detachEvent("on"+e,i)},n.prototype.trigger=function(e,i,s,o,a){var r={item:{count:this._items.length,index:this.current()}},l=t.camelCase(t.grep(["on",e,s],function(t){return t}).join("-").toLowerCase()),c=t.Event([e,"owl",s||"carousel"].join(".").toLowerCase(),t.extend({relatedTarget:this},r,i));return this._supress[e]||(t.each(this._plugins,function(t,e){e.onTrigger&&e.onTrigger(c)}),this.register({type:n.Type.Event,name:e}),this.$element.trigger(c),this.settings&&"function"==typeof this.settings[l]&&this.settings[l].call(this,c)),c},n.prototype.enter=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy(function(t,e){void 0===this._states.current[e]&&(this._states.current[e]=0),this._states.current[e]++},this))},n.prototype.leave=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy(function(t,e){this._states.current[e]--},this))},n.prototype.register=function(e){if(e.type===n.Type.Event){if(t.event.special[e.name]||(t.event.special[e.name]={}),!t.event.special[e.name].owl){var i=t.event.special[e.name]._default;t.event.special[e.name]._default=function(t){return!i||!i.apply||t.namespace&&-1!==t.namespace.indexOf("owl")?t.namespace&&t.namespace.indexOf("owl")>-1:i.apply(this,arguments)},t.event.special[e.name].owl=!0}}else e.type===n.Type.State&&(this._states.tags[e.name]?this._states.tags[e.name]=this._states.tags[e.name].concat(e.tags):this._states.tags[e.name]=e.tags,this._states.tags[e.name]=t.grep(this._states.tags[e.name],t.proxy(function(i,s){return t.inArray(i,this._states.tags[e.name])===s},this)))},n.prototype.suppress=function(e){t.each(e,t.proxy(function(t,e){this._supress[e]=!0},this))},n.prototype.release=function(e){t.each(e,t.proxy(function(t,e){delete this._supress[e]},this))},n.prototype.pointer=function(t){var i={x:null,y:null};return t=t.originalEvent||t||e.event,t=t.touches&&t.touches.length?t.touches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t,t.pageX?(i.x=t.pageX,i.y=t.pageY):(i.x=t.clientX,i.y=t.clientY),i},n.prototype.isNumeric=function(t){return!isNaN(parseFloat(t))},n.prototype.difference=function(t,e){return{x:t.x-e.x,y:t.y-e.y}},t.fn.owlCarousel=function(e){var i=Array.prototype.slice.call(arguments,1);return this.each(function(){var s=t(this),o=s.data("owl.carousel");o||(o=new n(this,"object"==typeof e&&e),s.data("owl.carousel",o),t.each(["next","prev","to","destroy","refresh","replace","add","remove"],function(e,i){o.register({type:n.Type.Event,name:i}),o.$element.on(i+".owl.carousel.core",t.proxy(function(t){t.namespace&&t.relatedTarget!==this&&(this.suppress([i]),o[i].apply(this,[].slice.call(arguments,1)),this.release([i]))},o))})),"string"==typeof e&&"_"!==e.charAt(0)&&o[e].apply(o,i)})},t.fn.owlCarousel.Constructor=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){var n=function(e){this._core=e,this._interval=null,this._visible=null,this._handlers={"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoRefresh&&this.watch()},this)},this._core.options=t.extend({},n.Defaults,this._core.options),this._core.$element.on(this._handlers)};n.Defaults={autoRefresh:!0,autoRefreshInterval:500},n.prototype.watch=function(){this._interval||(this._visible=this._core.$element.is(":visible"),this._interval=e.setInterval(t.proxy(this.refresh,this),this._core.settings.autoRefreshInterval))},n.prototype.refresh=function(){this._core.$element.is(":visible")!==this._visible&&(this._visible=!this._visible,this._core.$element.toggleClass("owl-hidden",!this._visible),this._visible&&this._core.invalidate("width")&&this._core.refresh())},n.prototype.destroy=function(){var t,i;e.clearInterval(this._interval);for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(i in Object.getOwnPropertyNames(this))"function"!=typeof this[i]&&(this[i]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoRefresh=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){var n=function(e){this._core=e,this._loaded=[],this._handlers={"initialized.owl.carousel change.owl.carousel resized.owl.carousel":t.proxy(function(e){if(e.namespace&&this._core.settings&&this._core.settings.lazyLoad&&(e.property&&"position"==e.property.name||"initialized"==e.type))for(var i=this._core.settings,s=i.center&&Math.ceil(i.items/2)||i.items,n=i.center&&-1*s||0,o=(e.property&&void 0!==e.property.value?e.property.value:this._core.current())+n,a=this._core.clones().length,r=t.proxy(function(t,e){this.load(e)},this);n++<s;)this.load(a/2+this._core.relative(o)),a&&t.each(this._core.clones(this._core.relative(o)),r),o++},this)},this._core.options=t.extend({},n.Defaults,this._core.options),this._core.$element.on(this._handlers)};n.Defaults={lazyLoad:!1},n.prototype.load=function(i){var s=this._core.$stage.children().eq(i),n=s&&s.find(".owl-lazy");!n||t.inArray(s.get(0),this._loaded)>-1||(n.each(t.proxy(function(i,s){var n,o=t(s),a=e.devicePixelRatio>1&&o.attr("data-src-retina")||o.attr("data-src");this._core.trigger("load",{element:o,url:a},"lazy"),o.is("img")?o.one("load.owl.lazy",t.proxy(function(){o.css("opacity",1),this._core.trigger("loaded",{element:o,url:a},"lazy")},this)).attr("src",a):(n=new Image,n.onload=t.proxy(function(){o.css({"background-image":'url("'+a+'")',opacity:"1"}),this._core.trigger("loaded",{element:o,url:a},"lazy")},this),n.src=a)},this)),this._loaded.push(s.get(0)))},n.prototype.destroy=function(){var t,e;for(t in this.handlers)this._core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Lazy=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){var n=function(e){this._core=e,this._handlers={"initialized.owl.carousel refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&this.update()},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&"position"==t.property.name&&this.update()},this),"loaded.owl.lazy":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&t.element.closest("."+this._core.settings.itemClass).index()===this._core.current()&&this.update()},this)},this._core.options=t.extend({},n.Defaults,this._core.options),this._core.$element.on(this._handlers)};n.Defaults={autoHeight:!1,autoHeightClass:"owl-height"},n.prototype.update=function(){var e=this._core._current,i=e+this._core.settings.items,s=this._core.$stage.children().toArray().slice(e,i),n=[],o=0;t.each(s,function(e,i){n.push(t(i).height())}),o=Math.max.apply(null,n),this._core.$stage.parent().height(o).addClass(this._core.settings.autoHeightClass)},n.prototype.destroy=function(){var t,e;for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoHeight=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){var n=function(e){this._core=e,this._videos={},this._playing=null,this._handlers={"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.register({type:"state",name:"playing",tags:["interacting"]})},this),"resize.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.video&&this.isInFullScreen()&&t.preventDefault()},this),"refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.is("resizing")&&this._core.$stage.find(".cloned .owl-video-frame").remove()},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&"position"===t.property.name&&this._playing&&this.stop()},this),"prepared.owl.carousel":t.proxy(function(e){if(e.namespace){var i=t(e.content).find(".owl-video");i.length&&(i.css("display","none"),this.fetch(i,t(e.content)))}},this)},this._core.options=t.extend({},n.Defaults,this._core.options),this._core.$element.on(this._handlers),this._core.$element.on("click.owl.video",".owl-video-play-icon",t.proxy(function(t){this.play(t)},this))};n.Defaults={video:!1,videoHeight:!1,videoWidth:!1},n.prototype.fetch=function(t,e){var i=function(){return t.attr("data-vimeo-id")?"vimeo":t.attr("data-vzaar-id")?"vzaar":"youtube"}(),s=t.attr("data-vimeo-id")||t.attr("data-youtube-id")||t.attr("data-vzaar-id"),n=t.attr("data-width")||this._core.settings.videoWidth,o=t.attr("data-height")||this._core.settings.videoHeight,a=t.attr("href");if(!a)throw new Error("Missing video URL.");if(s=a.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/),s[3].indexOf("youtu")>-1)i="youtube";else if(s[3].indexOf("vimeo")>-1)i="vimeo";else{if(!(s[3].indexOf("vzaar")>-1))throw new Error("Video URL not supported.");i="vzaar"}s=s[6],this._videos[a]={type:i,id:s,width:n,height:o},e.attr("data-video",a),this.thumbnail(t,this._videos[a])},n.prototype.thumbnail=function(e,i){var s,n,o,a=i.width&&i.height?'style="width:'+i.width+"px;height:"+i.height+'px;"':"",r=e.find("img"),l="src",c="",h=this._core.settings,u=function(t){n='<div class="owl-video-play-icon"></div>',s=h.lazyLoad?'<div class="owl-video-tn '+c+'" '+l+'="'+t+'"></div>':'<div class="owl-video-tn" style="opacity:1;background-image:url('+t+')"></div>',e.after(s),e.after(n)};if(e.wrap('<div class="owl-video-wrapper"'+a+"></div>"),this._core.settings.lazyLoad&&(l="data-src",c="owl-lazy"),r.length)return u(r.attr(l)),r.remove(),!1;"youtube"===i.type?(o="//img.youtube.com/vi/"+i.id+"/hqdefault.jpg",u(o)):"vimeo"===i.type?t.ajax({type:"GET",url:"//vimeo.com/api/v2/video/"+i.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){o=t[0].thumbnail_large,u(o)}}):"vzaar"===i.type&&t.ajax({type:"GET",url:"//vzaar.com/api/videos/"+i.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){o=t.framegrab_url,u(o)}})},n.prototype.stop=function(){this._core.trigger("stop",null,"video"),this._playing.find(".owl-video-frame").remove(),this._playing.removeClass("owl-video-playing"),this._playing=null,this._core.leave("playing"),this._core.trigger("stopped",null,"video")},n.prototype.play=function(e){var i,s=t(e.target),n=s.closest("."+this._core.settings.itemClass),o=this._videos[n.attr("data-video")],a=o.width||"100%",r=o.height||this._core.$stage.height();this._playing||(this._core.enter("playing"),this._core.trigger("play",null,"video"),n=this._core.items(this._core.relative(n.index())),this._core.reset(n.index()),"youtube"===o.type?i='<iframe width="'+a+'" height="'+r+'" src="//www.youtube.com/embed/'+o.id+"?autoplay=1&rel=0&v="+o.id+'" frameborder="0" allowfullscreen></iframe>':"vimeo"===o.type?i='<iframe src="//player.vimeo.com/video/'+o.id+'?autoplay=1" width="'+a+'" height="'+r+'" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>':"vzaar"===o.type&&(i='<iframe frameborder="0"height="'+r+'"width="'+a+'" allowfullscreen mozallowfullscreen webkitAllowFullScreen src="//view.vzaar.com/'+o.id+'/player?autoplay=true"></iframe>'),t('<div class="owl-video-frame">'+i+"</div>").insertAfter(n.find(".owl-video")),this._playing=n.addClass("owl-video-playing"))},n.prototype.isInFullScreen=function(){var e=i.fullscreenElement||i.mozFullScreenElement||i.webkitFullscreenElement;return e&&t(e).parent().hasClass("owl-video-frame")},n.prototype.destroy=function(){var t,e;this._core.$element.off("click.owl.video");for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Video=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){var n=function(e){this.core=e,this.core.options=t.extend({},n.Defaults,this.core.options),this.swapping=!0,this.previous=void 0,this.next=void 0,this.handlers={"change.owl.carousel":t.proxy(function(t){t.namespace&&"position"==t.property.name&&(this.previous=this.core.current(),this.next=t.property.value)},this),"drag.owl.carousel dragged.owl.carousel translated.owl.carousel":t.proxy(function(t){t.namespace&&(this.swapping="translated"==t.type)},this),"translate.owl.carousel":t.proxy(function(t){t.namespace&&this.swapping&&(this.core.options.animateOut||this.core.options.animateIn)&&this.swap()},this)},this.core.$element.on(this.handlers)};n.Defaults={animateOut:!1,animateIn:!1},n.prototype.swap=function(){if(1===this.core.settings.items&&t.support.animation&&t.support.transition){this.core.speed(0);var e,i=t.proxy(this.clear,this),s=this.core.$stage.children().eq(this.previous),n=this.core.$stage.children().eq(this.next),o=this.core.settings.animateIn,a=this.core.settings.animateOut;this.core.current()!==this.previous&&(a&&(e=this.core.coordinates(this.previous)-this.core.coordinates(this.next),s.one(t.support.animation.end,i).css({left:e+"px"}).addClass("animated owl-animated-out").addClass(a)),o&&n.one(t.support.animation.end,i).addClass("animated owl-animated-in").addClass(o))}},n.prototype.clear=function(e){t(e.target).css({left:""}).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut),this.core.onTransitionEnd()},n.prototype.destroy=function(){var t,e;for(t in this.handlers)this.core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Animate=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){var n=function(e){this._core=e,this._timeout=null,this._paused=!1,this._handlers={"changed.owl.carousel":t.proxy(function(t){t.namespace&&"settings"===t.property.name?this._core.settings.autoplay?this.play():this.stop():t.namespace&&"position"===t.property.name&&this._core.settings.autoplay&&this._setAutoPlayInterval()},this),"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoplay&&this.play()},this),"play.owl.autoplay":t.proxy(function(t,e,i){t.namespace&&this.play(e,i)},this),"stop.owl.autoplay":t.proxy(function(t){t.namespace&&this.stop()},this),"mouseover.owl.autoplay":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"mouseleave.owl.autoplay":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.play()},this),"touchstart.owl.core":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"touchend.owl.core":t.proxy(function(){this._core.settings.autoplayHoverPause&&this.play()},this)},this._core.$element.on(this._handlers),this._core.options=t.extend({},n.Defaults,this._core.options)};n.Defaults={autoplay:!1,autoplayTimeout:5e3,autoplayHoverPause:!1,autoplaySpeed:!1},n.prototype.play=function(t,e){this._paused=!1,this._core.is("rotating")||(this._core.enter("rotating"),this._setAutoPlayInterval())},n.prototype._getNextTimeout=function(s,n){return this._timeout&&e.clearTimeout(this._timeout),e.setTimeout(t.proxy(function(){this._paused||this._core.is("busy")||this._core.is("interacting")||i.hidden||this._core.next(n||this._core.settings.autoplaySpeed)},this),s||this._core.settings.autoplayTimeout)},n.prototype._setAutoPlayInterval=function(){this._timeout=this._getNextTimeout()},n.prototype.stop=function(){this._core.is("rotating")&&(e.clearTimeout(this._timeout),this._core.leave("rotating"))},n.prototype.pause=function(){this._core.is("rotating")&&(this._paused=!0)},n.prototype.destroy=function(){var t,e;this.stop();for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.autoplay=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){"use strict";var n=function(e){this._core=e,this._initialized=!1,this._pages=[],this._controls={},this._templates=[],this.$element=this._core.$element,this._overrides={next:this._core.next,prev:this._core.prev,to:this._core.to},this._handlers={"prepared.owl.carousel":t.proxy(function(e){e.namespace&&this._core.settings.dotsData&&this._templates.push('<div class="'+this._core.settings.dotClass+'">'+t(e.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot")+"</div>")},this),"added.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,0,this._templates.pop())},this),"remove.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,1)},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&"position"==t.property.name&&this.draw()},this),"initialized.owl.carousel":t.proxy(function(t){t.namespace&&!this._initialized&&(this._core.trigger("initialize",null,"navigation"),this.initialize(),this.update(),this.draw(),this._initialized=!0,this._core.trigger("initialized",null,"navigation"))},this),"refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._initialized&&(this._core.trigger("refresh",null,"navigation"),this.update(),this.draw(),this._core.trigger("refreshed",null,"navigation"))},this)},this._core.options=t.extend({},n.Defaults,this._core.options),this.$element.on(this._handlers)};n.Defaults={nav:!1,navText:["prev","next"],navSpeed:!1,navElement:"div",navContainer:!1,navContainerClass:"owl-nav",navClass:["owl-prev","owl-next"],slideBy:1,dotClass:"owl-dot",dotsClass:"owl-dots",dots:!0,dotsEach:!1,dotsData:!1,dotsSpeed:!1,dotsContainer:!1},n.prototype.initialize=function(){var e,i=this._core.settings;this._controls.$relative=(i.navContainer?t(i.navContainer):t("<div>").addClass(i.navContainerClass).appendTo(this.$element)).addClass("disabled"),this._controls.$previous=t("<"+i.navElement+">").addClass(i.navClass[0]).html(i.navText[0]).prependTo(this._controls.$relative).on("click",t.proxy(function(t){this.prev(i.navSpeed)},this)),this._controls.$next=t("<"+i.navElement+">").addClass(i.navClass[1]).html(i.navText[1]).appendTo(this._controls.$relative).on("click",t.proxy(function(t){this.next(i.navSpeed)},this)),i.dotsData||(this._templates=[t("<div>").addClass(i.dotClass).append(t("<span>")).prop("outerHTML")]),this._controls.$absolute=(i.dotsContainer?t(i.dotsContainer):t("<div>").addClass(i.dotsClass).appendTo(this.$element)).addClass("disabled"),this._controls.$absolute.on("click","div",t.proxy(function(e){var s=t(e.target).parent().is(this._controls.$absolute)?t(e.target).index():t(e.target).parent().index();e.preventDefault(),this.to(s,i.dotsSpeed)},this));for(e in this._overrides)this._core[e]=t.proxy(this[e],this)},n.prototype.destroy=function(){var t,e,i,s;for(t in this._handlers)this.$element.off(t,this._handlers[t]);for(e in this._controls)this._controls[e].remove();for(s in this.overides)this._core[s]=this._overrides[s];for(i in Object.getOwnPropertyNames(this))"function"!=typeof this[i]&&(this[i]=null)},n.prototype.update=function(){var t,e,i,s=this._core.clones().length/2,n=s+this._core.items().length,o=this._core.maximum(!0),a=this._core.settings,r=a.center||a.autoWidth||a.dotsData?1:a.dotsEach||a.items;if("page"!==a.slideBy&&(a.slideBy=Math.min(a.slideBy,a.items)),a.dots||"page"==a.slideBy)for(this._pages=[],t=s,e=0,i=0;t<n;t++){if(e>=r||0===e){if(this._pages.push({start:Math.min(o,t-s),end:t-s+r-1}),Math.min(o,t-s)===o)break;e=0,++i}e+=this._core.mergers(this._core.relative(t))}},n.prototype.draw=function(){var e,i=this._core.settings,s=this._core.items().length<=i.items,n=this._core.relative(this._core.current()),o=i.loop||i.rewind;this._controls.$relative.toggleClass("disabled",!i.nav||s),i.nav&&(this._controls.$previous.toggleClass("disabled",!o&&n<=this._core.minimum(!0)),this._controls.$next.toggleClass("disabled",!o&&n>=this._core.maximum(!0))),this._controls.$absolute.toggleClass("disabled",!i.dots||s),i.dots&&(e=this._pages.length-this._controls.$absolute.children().length,i.dotsData&&0!==e?this._controls.$absolute.html(this._templates.join("")):e>0?this._controls.$absolute.append(new Array(e+1).join(this._templates[0])):e<0&&this._controls.$absolute.children().slice(e).remove(),this._controls.$absolute.find(".active").removeClass("active"),this._controls.$absolute.children().eq(t.inArray(this.current(),this._pages)).addClass("active"))},n.prototype.onTrigger=function(e){var i=this._core.settings;e.page={index:t.inArray(this.current(),this._pages),count:this._pages.length,size:i&&(i.center||i.autoWidth||i.dotsData?1:i.dotsEach||i.items)}},n.prototype.current=function(){var e=this._core.relative(this._core.current());return t.grep(this._pages,t.proxy(function(t,i){return t.start<=e&&t.end>=e},this)).pop()},n.prototype.getPosition=function(e){var i,s,n=this._core.settings;return"page"==n.slideBy?(i=t.inArray(this.current(),this._pages),s=this._pages.length,e?++i:--i,i=this._pages[(i%s+s)%s].start):(i=this._core.relative(this._core.current()),s=this._core.items().length,e?i+=n.slideBy:i-=n.slideBy),i},n.prototype.next=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!0),e)},n.prototype.prev=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!1),e)},n.prototype.to=function(e,i,s){var n;!s&&this._pages.length?(n=this._pages.length,t.proxy(this._overrides.to,this._core)(this._pages[(e%n+n)%n].start,i)):t.proxy(this._overrides.to,this._core)(e,i)},t.fn.owlCarousel.Constructor.Plugins.Navigation=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){"use strict";var n=function(i){this._core=i,this._hashes={},this.$element=this._core.$element,this._handlers={"initialized.owl.carousel":t.proxy(function(i){i.namespace&&"URLHash"===this._core.settings.startPosition&&t(e).trigger("hashchange.owl.navigation")},this),"prepared.owl.carousel":t.proxy(function(e){if(e.namespace){var i=t(e.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash");if(!i)return;this._hashes[i]=e.content}},this),"changed.owl.carousel":t.proxy(function(i){if(i.namespace&&"position"===i.property.name){var s=this._core.items(this._core.relative(this._core.current())),n=t.map(this._hashes,function(t,e){return t===s?e:null}).join();if(!n||e.location.hash.slice(1)===n)return;e.location.hash=n}},this)},this._core.options=t.extend({},n.Defaults,this._core.options),this.$element.on(this._handlers),t(e).on("hashchange.owl.navigation",t.proxy(function(t){var i=e.location.hash.substring(1),s=this._core.$stage.children(),n=this._hashes[i]&&s.index(this._hashes[i]);void 0!==n&&n!==this._core.current()&&this._core.to(this._core.relative(n),!1,!0)},this))};n.Defaults={URLhashListener:!1},n.prototype.destroy=function(){var i,s;t(e).off("hashchange.owl.navigation");for(i in this._handlers)this._core.$element.off(i,this._handlers[i]);for(s in Object.getOwnPropertyNames(this))"function"!=typeof this[s]&&(this[s]=null)},t.fn.owlCarousel.Constructor.Plugins.Hash=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){function n(e,i){var n=!1,o=e.charAt(0).toUpperCase()+e.slice(1);return t.each((e+" "+r.join(o+" ")+o).split(" "),function(t,e){if(a[e]!==s)return n=!i||e,!1}),n}function o(t){return n(t,!0)}var a=t("<support>").get(0).style,r="Webkit Moz O ms".split(" "),l={transition:{end:{WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"}},animation:{end:{WebkitAnimation:"webkitAnimationEnd",MozAnimation:"animationend",OAnimation:"oAnimationEnd",animation:"animationend"}}},c={csstransforms:function(){return!!n("transform")},csstransforms3d:function(){return!!n("perspective")},csstransitions:function(){return!!n("transition")},cssanimations:function(){return!!n("animation")}};c.csstransitions()&&(t.support.transition=new String(o("transition")),t.support.transition.end=l.transition.end[t.support.transition]),c.cssanimations()&&(t.support.animation=new String(o("animation")),t.support.animation.end=l.animation.end[t.support.animation]),c.csstransforms()&&(t.support.transform=new String(o("transform")),t.support.transform3d=c.csstransforms3d())}(window.Zepto||window.jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
